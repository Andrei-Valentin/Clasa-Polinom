# -*- coding: utf-8 -*-
"""Tema Lab1_IAVA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KphdxLdP6ocY6zNuaRN2MgjhTnnCx4E1

**Laborator 1**

# Python

**Exercitiu (2p)**

1. Construiti o functie care primeste ca parametri doua numere intregi [a,b]. Functia construieste o lista cu toate numerele impare din interval, folosind list comprehension. **(1p)**


2. Modificati list comprehension ca sa selecteze numerele impare si o alta conditie la alegere, data printr-o functie in list comprehension (e.g. numerele mai mari ca 50). **(1p)**
"""

def functie_imp(a: int, b: int):
  newlist = [i for i in range(a,b) if i%2==1]
  return newlist

print(functie_imp(1, 100))
print()


def functie_conditie(a: int):
  if(a>50): return True
  return False

def functie_modificata(a: int, b: int):
  newlist = [i for i in range(a,b) if i%2==1 and functie_conditie(i)]
  return newlist

print(functie_modificata(1, 100))

"""# Numpy

**Exercitiu (4p)**

**Reshape**
- Se da o lista de $n$ puncte in plan $2D$ cu valori aleatoare (e.g. facial keypoits). 
- Notam cu $x_i$ coordonata pe dimensiunea 1 si cu $y_i$ coordanata pe dimensiunea 2
$ [ x_1, y_1, x_2, y_2,  ... x_n, y_n] $

- Putem interpeta lista de puncte in doua moduri:
  - ```[(x1,y1),(x2,y2),(x3,y3) ... (xn, yn)]```
  - ```[(x1,x2,x3 ... xn),...(y1,y2,y3 ..., yn)]```


**Cerinte**: 
- Folosind numpy arrays, afisati lista de coordonate sub urmatoarele formate: **(0.5p)** 
 - $ [x1, y1, x2, y2, x3, y3, ... xn, yn] $
 - $ [x1, x2, x3, ... xn, y1, y2, y3, ... yn] $
- Creati o matrice cu dimensiunile *n x 2* care contine lista de puncte in ordine **row-major**  **(0.5p)**
 - **Hint**: Puteti folosi ```np.reshape```
- Creati o matrice cu dimensiunile *2 x n* care contine lista de puncte in ordine **column-major**. **(0.5p)** 


 - Folosind oricare din matricile de la pasii anteriori: 
  - Afisati doar punctele care au norma mai mare decat 0.5 . **(1p)** 
  - Calculati centrul de greutate al punctelor si dispersia lor. **(1.5p)**
"""

import random
import numpy as np
n, m = 5, 2 # 5 puncte cu 2 cooordonate x,y

# numarul de elemente din array liniarizat
k = n * m

my_data_list = [random.random() for _ in range(k)]

print(my_data_list)
print()
print(np.concatenate((my_data_list[::2],my_data_list[1::2])))
print()


row_major = np.reshape(my_data_list, (n, 2))
print("Row major")
print(row_major)
print()

col_major = np.reshape(np.concatenate((my_data_list[::2],my_data_list[1::2])), (2, n))
print("Column major")
print(col_major)
print()

print("Punctele cu norma mai mare decat 0.5:")
x=np.array(my_data_list[::2])
x=x**2
y=np.array(my_data_list[1::2])
y=y**2
norme=x+y
norme=np.sqrt(norme)

for i in range(len(norme)):
  if norme[i]>0.5:
    print("X =",my_data_list[2*i],"Y =",my_data_list[2*i+1],"cu norma =",norme[i])



centru_x=np.sum(my_data_list[::2])/n
centru_y=np.sum(my_data_list[1::2])/n
print("Centrul de greutate al punctelor este (",centru_x,",",centru_y,")")
print("Dispersia punctelor este",np.std(row_major))

"""# OPENCV / CV2

**Exercitiu (4p)**

- Incarcati o imagine in Google Colaboratory. Cititi imaginea de pe disk si afisati-o. **(1p)**
- Cresteti luminozitatea imaginii cu 25% fata de cea originala. Afisati imaginea rezultata. **(1p)**
- Cresteti contrastul imaginii cu 1.2x Afisati imaginea rezultata. **(1p)**
- Normalizati imaginea astfel incat sa avem mean 0 si stddev = 1. **(1p)**
"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

img = cv2.imread('monke.jpg') # Citire imagine

def crestere_luminozitate(img):
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)

    lim = 255 - 0.25*v
    v[v > lim] = 255
    v[v <= lim] = 1.25*v[v <= lim]

    final_hsv = cv2.merge((h, s, v))
    img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
    return img


print("Imaginea originala")
cv2_imshow(img)  # Afisare imagine
print()

print("Imaginea dupa ce am crescut luminozitatea")
cv2_imshow(crestere_luminozitate(img))  # Afisare imagine cu luminozitatea crescuta
print()

print("Imaginea dupa ce am crescut contrastul")
contrast_img = cv2.addWeighted( img, 1.2, img, 0, 0)
cv2_imshow(contrast_img)
print()

print("Imaginea normalizata")
img_norm = cv2.normalize(img, img, 0, 255, cv2.NORM_MINMAX)

cv2_imshow(img_norm)
